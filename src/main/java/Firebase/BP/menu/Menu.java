/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Firebase.BP.menu;


import static Firebase.BP.util.Common.initFirebase;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import org.apache.commons.logging.Log;
import java.awt.image.BufferedImage; 
import javax.imageio.ImageIO; 
import java.io.File; 
import java.io.IOException; 
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

/**
 *
 * @author aryam
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    //File fileB;
    public static double lat,lon;
    public static String names;
    int totalmon;
    boolean check=false;
    //Prob pb=new Prob();
    String paf="";
    String customer="";
    int moneyt=0;
    String[] reg={"106171005661873406353","11184759522068048795"};
    public FirebaseDatabase database,db;
    public DatabaseReference myRef,exRef;
    private byte[] encryptionKey={5,115,51,86,105,4,-31,-23,-68,88,17,20,3,-105,119,-53};
    private Cipher cipher, decipher;
    private SecretKeySpec secretKeySpec;
    public Menu() throws IOException {
        initComponents();
          try {
            cipher=Cipher.getInstance("AES");
            decipher=Cipher.getInstance("AES");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        }
        //initFirebase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        filech = new javax.swing.JButton();
        first = new javax.swing.JRadioButton();
        first.setEnabled(false);
        pay = new javax.swing.JButton();
        pay.setEnabled(false);
        money = new javax.swing.JTextField();
        authh = new javax.swing.JButton();
        authh.setEnabled(false);
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Franklin Gothic Heavy", 0, 10)); // NOI18N
        setForeground(java.awt.Color.orange);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        filech.setBackground(new java.awt.Color(0, 153, 153));
        filech.setIcon(new javax.swing.ImageIcon("C:\\Users\\aryam\\Desktop\\Group 3.png")); // NOI18N
        filech.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechActionPerformed(evt);
            }
        });

        first.setBackground(new java.awt.Color(0, 153, 153));
        first.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        first.setText("I agree to the terms and conditions");
        first.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstActionPerformed(evt);
            }
        });

        pay.setBackground(new java.awt.Color(0, 153, 153));
        pay.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        pay.setForeground(new java.awt.Color(102, 102, 255));
        pay.setIcon(new javax.swing.ImageIcon("C:\\Users\\aryam\\Desktop\\Group 1.png")); // NOI18N
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        money.setBackground(new java.awt.Color(153, 255, 255));
        money.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        money.setText("Enter amount to be paid");
        money.setSelectedTextColor(new java.awt.Color(0, 0, 51));
        money.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                moneyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                moneyFocusLost(evt);
            }
        });
        money.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moneyActionPerformed(evt);
            }
        });

        authh.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        authh.setForeground(new java.awt.Color(60, 63, 65));
        authh.setIcon(new javax.swing.ImageIcon("C:\\Users\\aryam\\Desktop\\Group 2.png")); // NOI18N
        authh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authhActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(228, 228, 228))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(filech, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(money, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(first)
                                .addComponent(authh, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(filech, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(money, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(69, 69, 69)
                .addComponent(authh, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(first)
                .addGap(18, 18, 18)
                .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int monet,m2;
    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        System.out.println("NOOOP");
        readMoney();
        //try {
           
            /*m2=Integer.parseInt(money.getText());
            System.out.println(m2+"M2");
            monet-=m2;
            System.out.println(monet+"MONET");
            try {
            TimeUnit.SECONDS.sleep(4);
            } catch (InterruptedException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }*/
       /* } catch (InterruptedException | IOException ex ) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        money.setText("Enter amount to be paid");
        first.setSelected(false);
        try {
            TimeUnit.SECONDS.sleep(3);
        } catch (InterruptedException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        pay.setEnabled(false);
        first.setEnabled(false);
        authh.setEnabled(false);
    }//GEN-LAST:event_payActionPerformed

    private void firstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstActionPerformed
        // TODO add your handling code here:
         try {
            cipher=Cipher.getInstance("AES");
            decipher=Cipher.getInstance("AES");
        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
        }
        secretKeySpec=new SecretKeySpec(encryptionKey,"AES");
        database = FirebaseDatabase.getInstance();
        myRef = database.getReference(customer);
        System.out.println("WUBBA SHOULD "+names+" "+lat+" "+lon);
        System.out.println("IM looking here");
        setValued();
        /*try {
            
        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        /* while(monet==0)
        {
        try {
        TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException ex) {
        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        }*/
        //pay.setVisible(true);
        //System.out.println(moneyt+"HAHAHAHAHA");
        
       /* while(monet==0)
        {
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
        //pay.setVisible(true);
        //System.out.println(moneyt+"HAHAHAHAHA");
    }//GEN-LAST:event_firstActionPerformed

    private void authhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authhActionPerformed
        // TODO add your handling code here:
        tt();
        while(customer.equals(""))
        {
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        first.setEnabled(true);
        System.out.println(names);
    }//GEN-LAST:event_authhActionPerformed

    private void filechActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechActionPerformed
        // TODO add your handling code here:
        /*chooser ch=new chooser();
        ch.setVisible(true);
        fileB=ch.fc.getSelectedFile();*/
        //System.out.println(ff.getPath());
       //Prob pb= new Prob();
       //pb.setVisible(true);
       //System.out.println(pb.filepath);    
        //fileB=pb.f.getSelectedFile();
        paf=fpath();
        //System.out.println(money.getText()+"OKKK");
        authh.setEnabled(true);
    }//GEN-LAST:event_filechActionPerformed

    private void moneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moneyActionPerformed
        // TODO add your handling code here:
        System.out.println(money.getText()+"OKKK");
        money.addFocusListener(new FocusListener() {
                        @Override
                        public void focusGained(FocusEvent e) {
                            if(money.getText().equals("Enter amount to be paid"))
                                money.setText("");
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void focusLost(FocusEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });
    }//GEN-LAST:event_moneyActionPerformed

    private void moneyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moneyFocusGained
        // TODO add your handling code here:
         if(money.getText().equals("Enter amount to be paid"))
                                money.setText("");
    }//GEN-LAST:event_moneyFocusGained

    private void moneyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moneyFocusLost
        // TODO add your handling code here:
        if(money.getText().equals("") ||money.getText().equals(null) )
            money.setText("Enter amount to be paid");
    }//GEN-LAST:event_moneyFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Menu().setVisible(true);
                    
                } catch (IOException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton authh;
    private javax.swing.JButton filech;
    private javax.swing.JRadioButton first;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JTextField money;
    private javax.swing.JButton pay;
    // End of variables declaration//GEN-END:variables
private void readMoney() 
{
    //Ipapi ipp=new Ipapi();
    //Login logg=null;
       /* try {
            logg = new Login();
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }*/
   String s=AESEncryptionMethod(""+monet);
   myRef.child("Money").setValue(s, new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
   myRef.child("Shop").child(names).child("lat").setValue(AESEncryptionMethod(""+lat), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
   myRef.child("Shop").child(names).child("lon").setValue(AESEncryptionMethod(""+lon), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
   myRef.child("Shop").child(names).child("Spent").setValue(AESEncryptionMethod(""+totalmon), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
}
    private void setValued()
{
    
     myRef.addValueEventListener(new ValueEventListener() {
        
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            // This method is called once with the initial value and again
            // whenever data at this location is updated.
            /* Login logg=null;
            try {
                logg = new Login();
            } catch (IOException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            String s=null;
            if(dataSnapshot.child("Shop").hasChild(names))
            {
               s=dataSnapshot.child("Money").getValue().toString();
            String totmon=AESDecryptionMethod(dataSnapshot.child("Shop").child(names).child("Spent").getValue().toString());
            totalmon=Integer.parseInt(totmon);
            }
            else
            {
                System.out.println("YES OK OK OK");
                startValue();
            }
           monet=Integer.parseInt(AESDecryptionMethod(s));
           System.out.println(monet);
           m2=Integer.parseInt(money.getText());
           if(m2<monet)
           {
               totalmon+=m2;
               monet-=m2;
               check=true;
               pay.setEnabled(true);
           }
           else
           {
               JOptionPane.showMessageDialog(Menu.this,"Insufficient funds in wallet");
               check=false;
           }
           System.out.println(monet+"WHAT");
           //readMoney(monet);
        }

        @Override
        public void onCancelled(DatabaseError error) {
            // Failed to read value
            
        }
    });
     /*if(check)
         pay.setVisible(true);*/
     System.out.println("SVdone");
}
    public void startValue()
    {
        System.out.println("START VALUE");
         myRef.child("Shop").child(names).child("lat").setValue(AESEncryptionMethod(""+lat), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
          myRef.child("Shop").child(names).child("lon").setValue(AESEncryptionMethod(""+lon), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
           myRef.child("Shop").child(names).child("Spent").setValue(AESEncryptionMethod("0"), new DatabaseReference.CompletionListener() {
       @Override
       public void onComplete(DatabaseError de, DatabaseReference dr) {
           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       }
   });
    }

   private String AESEncryptionMethod(String s) {
        byte[] stringbyte=s.getBytes();
        byte[] encryptedbyte= new byte[stringbyte.length];
        try {
            cipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);
            encryptedbyte=cipher.doFinal(stringbyte);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        String returnstring=null;
        try {
            returnstring = new String(encryptedbyte,"ISO-8859-1");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return returnstring;
    }
    private String AESDecryptionMethod(String s)
    {
        byte[] encryptedbyte = new byte[0];
        try {
            encryptedbyte=s.getBytes("ISO-8859-1");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String decryptedstring=null;
        byte[] decryption;
        try {
            decipher.init(Cipher.DECRYPT_MODE,secretKeySpec);
            decryption=decipher.doFinal(encryptedbyte);
            decryptedstring=new String(decryption);
        } catch (InvalidKeyException | BadPaddingException | IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        return decryptedstring;
    }
    public void tt()
    {
      db=FirebaseDatabase.getInstance();
      exRef = db.getReference();
      exRef.addValueEventListener(new ValueEventListener() {
        @Override
        public void onDataChange(DataSnapshot dataSnapshot) {
            // This method is called once with the initial value and again
            // whenever data at this location is updated.
         for(DataSnapshot ds : dataSnapshot.getChildren())
               {
                   System.out.println(ds.getKey());
                   String s=ds.getKey();
                   boolean ans=comp(s);
                   if(ans==true)
                   {
                       customer=s;
                       break;
                   }
                   else
                       continue;
               }
        }

        @Override
        public void onCancelled(DatabaseError error) {
            // Failed to read value
        }
    });
    }
 public boolean comp(String n)
 {
     BufferedImage imgA = null; 
        BufferedImage imgB = null; 
    double percentage=10.0;
        try
        { 
            //Prob pb=new Prob();
           // String pathh=pb.filepath;
            n+=".bmp";
            System.out.println(n);
            System.out.println(paf);
            File fileA = new File("C:/Users/aryam/Desktop/django_sem/"+n); 
            File fileB = new File(paf); 
            //System.out.println(fileC.getPath());
  
            imgA = ImageIO.read(fileA); 
            imgB = ImageIO.read(fileB); 
        } 
        catch (IOException e) 
        { 
            System.out.println(e); 
        } 
        int width1 = imgA.getWidth(); 
        int width2 = imgB.getWidth(); 
        int height1 = imgA.getHeight(); 
        int height2 = imgB.getHeight(); 
  
        if ((width1 != width2) || (height1 != height2)) 
            System.out.println("Error: Images dimensions"+ 
                                             " mismatch"); 
        else
        { 
            long difference = 0; 
            for (int y = 0; y < height1; y++) 
            { 
                for (int x = 0; x < width1; x++) 
                { 
                    int rgbA = imgA.getRGB(x, y); 
                    int rgbB = imgB.getRGB(x, y); 
                    int redA = (rgbA >> 16) & 0xff; 
                    int greenA = (rgbA >> 8) & 0xff; 
                    int blueA = (rgbA) & 0xff; 
                    int redB = (rgbB >> 16) & 0xff; 
                    int greenB = (rgbB >> 8) & 0xff; 
                    int blueB = (rgbB) & 0xff; 
                    difference += Math.abs(redA - redB); 
                    difference += Math.abs(greenA - greenB); 
                    difference += Math.abs(blueA - blueB); 
                } 
            } 
  
            // Total number of red pixels = width * height 
            // Total number of blue pixels = width * height 
            // Total number of green pixels = width * height 
            // So total number of pixels = width * height * 3 
            double total_pixels = width1 * height1 * 3; 
  
            // Normalizing the value of different pixels 
            // for accuracy(average pixels per color 
            // component) 
            double avg_different_pixels = difference / 
                                          total_pixels; 
  
            // There are 255 values of pixels in total 
            percentage = (avg_different_pixels / 
                                            255) * 100; 
  
            System.out.println("Difference Percentage-->" + 
                                                percentage); 
        } 
        if(percentage==0.0)
            return true;
        else
            return false;
 }
 public String fpath()
 {
     String filepath="";
         JFileChooser fc=new JFileChooser();    
    int i=fc.showOpenDialog(this);    
    if(i==JFileChooser.APPROVE_OPTION){    
        File f=fc.getSelectedFile();    
        filepath=f.getPath();
        
 }
    return filepath;
}
}

